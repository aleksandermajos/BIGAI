using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;
using NetMQ;
using NetMQ.Sockets;
using System.Text;
using System.Collections.Generic;

namespace cAlgo
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
    public class QUANTMAVERICK : Robot
    {
        [Parameter(DefaultValue = 0.0)]
        public double Parameter { get; set; }
        static NetMQContext ctx = NetMQContext.Create();
        private NetMQSocket SOCPUB = ctx.CreatePublisherSocket();
        private NetMQSocket SOCREP = ctx.CreateResponseSocket();
        bool NEWPORTS = false;
        String text = "";

        protected override void OnStart()
        {
            using (NetMQContext ctx0 = NetMQContext.Create())
            {
                using (var SUBLISTENERPORTS = ctx0.CreateSubscriberSocket())
                {
                    string topic = "";
                    SUBLISTENERPORTS.Connect("tcp://localhost:2025");
                    SUBLISTENERPORTS.Subscribe(topic);
                    string messageTopicReceived = SUBLISTENERPORTS.ReceiveFrameString();
                    string messageReceived = SUBLISTENERPORTS.ReceiveFrameString();
                    Print(messageReceived);
                    Console.WriteLine(messageReceived);
                    var ports = new List<String>();
                    SOCPUB.Bind("tcp://*:2027");
                    SOCREP.Bind("tcp://*:2028");
                    NEWPORTS = true;
                }
            }
        }

        protected override void OnTick()
        {
            using (ctx)
            {
                using (SOCPUB)
                {
                    // SOCPUB.Send("oko", dontWait: true);
                    int oko = 6;
                    oko = 5;
                }

            }

        }

        protected override void OnStop()
        {

        }
    }


}
